FROM ubuntu:22.04 AS builder

# This Dockerfile builds a docker image containing all Rapthor's dependencies

# By default, build non-portable code, for the oldest CPU that supports AVX2
ARG PORTABLE=FALSE
ARG TARGET_CPU=haswell

ARG IDG_COMMIT=master
ARG EVERYBEAM_COMMIT=master
ARG DYSCO_COMMIT=master
ARG AOFLAGGER_COMMIT=master
ARG WSCLEAN_COMMIT=master
ARG SAGECAL_COMMIT=master
ARG DP3_COMMIT=master

# Install all build-time dependencies
RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get update && \
    apt-get install -y \
        bison \
        build-essential \
        casacore-dev \
        cmake \
        flex \
        gfortran \
        git \
        libarmadillo-dev \
        libboost-date-time-dev \
        libboost-filesystem-dev \
        libboost-numpy-dev \
        libboost-program-options-dev \
        libboost-python-dev \
        libboost-system-dev \
        libboost-test-dev \
        libcfitsio-dev \
        libfftw3-dev \
        libgsl-dev \
        libgtkmm-3.0-dev \
        libhdf5-serial-dev \
        liblua5.3-dev \
        libpng-dev \
        ninja-build \
        pybind11-dev \
        python3-dev \
        wcslib-dev \
        wget

# Prepare the environment for installing the Rapthor source dependencies.
WORKDIR /src

# Install IDG
RUN git clone --no-checkout https://git.astron.nl/RD/idg.git
RUN git -C idg checkout ${IDG_COMMIT}
RUN cmake \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DBUILD_WITH_PYTHON=OFF \
    -DBUILD_TESTING=OFF \
    -DPORTABLE=${PORTABLE} \
    -DTARGET_CPU=${TARGET_CPU} \
    -H/src/idg \
    -B/src/idg/build \
    -G Ninja
RUN ninja -C /src/idg/build install

# Install EveryBeam. Do not compile python bindings, they will interfere with
# the ones in the binary wheel on PyPI.
RUN git clone --no-checkout https://git.astron.nl/RD/EveryBeam.git
RUN git -C EveryBeam checkout ${EVERYBEAM_COMMIT}
RUN cmake \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DBUILD_WITH_PYTHON=OFF \
    -DBUILD_TESTING=OFF \
    -DPORTABLE=${PORTABLE} \
    -DTARGET_CPU=${TARGET_CPU} \
    -H/src/EveryBeam \
    -B/src/EveryBeam/build \
    -G Ninja
RUN ninja -C /src/EveryBeam/build install

# Install Dysco
RUN git clone --no-checkout https://github.com/aroffringa/dysco.git
RUN git -C dysco checkout ${DYSCO_COMMIT}
RUN cmake \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DPORTABLE=${PORTABLE} \
    -DTARGET_CPU=${TARGET_CPU} \
    -H/src/dysco \
    -B/src/dysco/build \
    -G Ninja
RUN ninja -C /src/dysco/build install

# Install AOFlagger
RUN git clone --no-checkout https://gitlab.com/aroffringa/aoflagger.git
RUN git -C aoflagger checkout ${AOFLAGGER_COMMIT}
RUN cmake \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DPORTABLE=${PORTABLE} \
    -DTARGET_CPU=${TARGET_CPU} \
    -H/src/aoflagger \
    -B/src/aoflagger/build \
    -G Ninja
RUN ninja -C /src/aoflagger/build install

# Install WSClean
RUN git clone --no-checkout https://gitlab.com/aroffringa/wsclean.git
RUN git -C wsclean checkout ${WSCLEAN_COMMIT}
RUN cmake \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DBUILD_TESTING=OFF \
    -DPORTABLE=${PORTABLE} \
    -DTARGET_CPU=${TARGET_CPU} \
    -H/src/wsclean \
    -B/src/wsclean/build \
    -G Ninja
RUN ninja -C /src/wsclean/build install

# Install SAGECal libdirac
RUN git clone --no-checkout https://github.com/nlesc-dirac/sagecal.git
RUN git -C sagecal checkout ${SAGECAL_COMMIT}
RUN cmake \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DLIB_ONLY=1 \
    -H/src/sagecal \
    -B/src/sagecal/build \
    -G Ninja
RUN ninja -C /src/sagecal/build install

# Install DP3
RUN git clone --no-checkout https://git.astron.nl/RD/DP3.git
RUN git -C DP3 checkout ${DP3_COMMIT}
RUN cmake \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DBUILD_TESTING=OFF \
    -DPORTABLE=${PORTABLE} \
    -DTARGET_CPU=${TARGET_CPU} \
    -DLIBDIRAC_PREFIX=/usr/ \
    -H/src/DP3 \
    -B/src/DP3/build \
    -G Ninja
RUN ninja -C /src/DP3/build install

# Generate file with one-liner package version descriptions
RUN mkdir -p /usr/local/share/rapthor; \
for p in $(find /src -type d -name .git | sort); \
do \
  d=$(dirname $p); b=$(basename $d); cd $d; l=$(git log -1 --oneline); \
  echo "$b: $l"; \
done \
> /usr/local/share/rapthor/sw-versions.txt

# Do not use `pip` from the Debian repository, but fetch it from PyPA.
# This way, we are sure that the latest versions of `pip`, `setuptools`, and
# `wheel` are installed in /usr/local, the only directory we're going to copy
# over to the next build stage.
RUN wget https://bootstrap.pypa.io/get-pip.py && \
    python3 get-pip.py

# Install current version of Rapthor, and then uninstall it again. By doing
# so, we can speed up the build of the final image, because all of Rapthor's
# dependencies will have been installed already and (probably) don't need to
# be updated.
COPY . rapthor
RUN python3 -m pip install --upgrade ./rapthor && \
    python3 -m pip uninstall -y rapthor

#---------------------------------------------------------------------------
# The image will now be rebuilt without adding the sources, in order to
# reduce the size of the image.
#---------------------------------------------------------------------------
FROM ubuntu:22.04 AS runner

COPY --from=builder /usr/local /usr/local

ARG IDG_COMMIT=master
ARG EVERYBEAM_COMMIT=master
ARG DYSCO_COMMIT=master
ARG AOFLAGGER_COMMIT=master
ARG WSCLEAN_COMMIT=master
ARG SAGECAL_COMMIT=master
ARG DP3_COMMIT=master

# Add version information to the metadata of the image
LABEL \
    nl.astron.rapthor.idg.version=${IDG_COMMIT} \
    nl.astron.rapthor.everybeam.version=${EVERYBEAM_COMMIT} \
    nl.astron.rapthor.dysco.version=${DYSCO_COMMIT} \
    nl.astron.rapthor.aoflagger.version=${AOFLAGGER_COMMIT} \
    nl.astron.rapthor.wsclean.version=${WSCLEAN_COMMIT} \
    nl.astron.rapthor.sagecal.version=${SAGECAL_COMMIT} \
    nl.astron.rapthor.dp3.version=${DP3_COMMIT}

# Only install run-time required packages
RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        casacore-tools \
        git \
        libatkmm-1.6-1v5 \
        libblas3 \
        libboost-filesystem1.74.0 \
        libboost-program-options1.74.0 \
        libcairomm-1.0-1v5 \
        libcasa-casa6 \
        libcasa-fits6 \
        libcasa-measures6 \
        libcasa-ms6 \
        libcasa-scimath6 \
        libcasa-tables6 \
        libcfitsio9 \
        libfftw3-double3 \
        libfftw3-single3 \
        libglib2.0-0 \
        libglibmm-2.4-1v5 \
        libgomp1 \
        libgsl27 \
        libgtkmm-3.0-1v5 \
        libhdf5-103-1 \
        libhdf5-cpp-103-1 \
        liblapack3 \
        liblua5.3-0 \
        libpangomm-1.4-1v5 \
        libpng16-16 \
        libpython3.10 \
        libsigc++-2.0-0v5 \
        libstdc++6 \
        nodejs \
        python3 \
        python3-distutils \
        wget

RUN rm -rf /var/lib/apt/lists/*

# Install the casacore measures data. We purposely do not install these from
# the Ubuntu repository, but download the latest version directly from the
# ASTRON ftp site.
# Note: The file on the ftp site is updated daily. When warnings regarding
# leap seconds appear, ignore them or regenerate the docker image.
RUN mkdir -p /usr/share/casacore/data && \
    ln -s /usr/share/casacore /var/lib/casacore && \
    wget -qO - ftp://ftp.astron.nl/outgoing/Measures/WSRT_Measures.ztar | \
        tar -C /usr/share/casacore/data -xzf -

# Try to run the compiled tools to make sure they run without
# a problem (e.g. no missing libraries).
RUN aoflagger --version && \
    DP3 --version && \
    wsclean --version
