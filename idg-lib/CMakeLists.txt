# Copyright (C) 2020 ASTRON (Netherlands Institute for Radio Astronomy)
# SPDX-License-Identifier: GPL-3.0-or-later

# the project
project(ImageDomainGridder CXX)

# set cmake module path
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")

# options
option(BUILD_LIB_CPU "Build CPU libraries" ON)
option(BUILD_LIB_CUDA "Build CUDA libraries" OFF)
#option (BUILD_LIB_OPENCL "Build OpenCL libraries" OFF)
option(BUILD_WITH_MKL "Build with MKL (if available)" OFF)
option(BUILD_WITH_POWERSENSOR "Build with PowerSensor" OFF)
option(PERFORMANCE_REPORT "Report performance metrics" OFF)
option(COMPILE_VERBOSE "Report compiler flags used during runtime compilation"
       OFF)
option(STRICT_WARNINGS "Turn compiliation warnings into errors" ON)
option(USE_LOOKUP_TABLE "Use sine/cosine lookup table" OFF)
option(USE_PHASOR_EXTRAPOLATION "Use phasor extrapolation" OFF)
option(CUDA_KERNEL_DEBUG "Enable debug mode for CUDA kernels" OFF)

# Compiler settings:
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE
      Release
      CACHE STRING "Default build type." FORCE)
endif()
# set debug print info
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  set(CLANG_CXX_COMPILER TRUE)
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  set(GNU_CXX_COMPILER TRUE)
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  set(INTEL_CXX_COMPILER TRUE)
  set(CMAKE_SHARED_LINKER_FLAGS "-static-intel")
  set(INSTRUCTION_SET
      "Host"
      CACHE STRING "Instruction set for CPU kernels")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  set(MSVC_CXX_COMPILER TRUE)
endif()

# Set the warning level to all and treat all warnings as errors
# TODO: setting of the flags is only applied when using a GNU compiler
if(STRICT_WARNINGS
   AND CMAKE_BUILD_TYPE STREQUAL "Debug"
   AND GNU_CXX_COMPILER)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror")
endif()

# make sure C++11 is used (in newer CMake use CXX_STANDARD)
include(CheckCXXCompilerFlag)
check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
  message(
    STATUS
      "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler."
  )
endif()

# make sure openmp is used if available
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" AND ${CMAKE_CXX_COMPILER_VERSION}
                                                   VERSION_LESS "3.8.0")
  set(OpenMP_CXX_FLAGS "-fopenmp")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
else()
  find_package(OpenMP REQUIRED)
  if(OPENMP_FOUND)
    if(INTEL_CXX_COMPILER)
      set(OpenMP_CXX_FLAGS "-qopenmp")
    endif()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS
        "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
  else()
    message(STATUS "OpenMP support not detected")
  endif()
endif()

# detect architecture
execute_process(
  COMMAND uname -m
  COMMAND tr -d '\n'
  OUTPUT_VARIABLE ARCHITECTURE)
if(${ARCHITECTURE} STREQUAL "ppc64le")
  set(POWER_ARCHITECTURE TRUE)
endif()

# resolve dependencies
if(BUILD_WITH_POWERSENSOR)
  find_package(PowerSensor REQUIRED)
endif()
if(${POWERSENSOR_FOUND})
  set(HAVE_POWERSENSOR TRUE)
  include_directories(${POWERSENSOR_INCLUDE_DIR})
else()
  unset(POWERSENSOR_LIBRARY CACHE)
  unset(POWERSENSOR_INCLUDE_DIR CACHE)
endif()

# FFT library
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel" OR ${BUILD_WITH_MKL})
  # assume MKL is present when using Intel compiler
  find_package(MKL REQUIRED)
  set(HAVE_MKL TRUE)
  set(FFTW3_LIBRARIES ${MKL_LIBRARIES})
  set(FFTW3_INCLUDE_DIR "${MKL_INCLUDE_DIRS}/fftw")
else()
  find_package(FFTW3 REQUIRED COMPONENTS single)
endif()

# CUDA
if(BUILD_LIB_CUDA)
  if(${CMAKE_VERSION} VERSION_LESS "3.17")
    # Use deprecated FindCUDA module to find CUDA
    find_package(CUDA REQUIRED)

    # Helper function to add custom targets compatible
    # with the targets generated by the FindCUDAToolkit module
    function(cuda_add_lib target_name lib_name)
      if(NOT TARGET CUDA::${target_name} AND CUDA_${lib_name}_LIBRARY)
        add_library(CUDA::${target_name} IMPORTED INTERFACE)
        target_include_directories(CUDA::${target_name} SYSTEM
                                   INTERFACE "${CUDAToolkit_INCLUDE_DIRS}")
        target_link_libraries(CUDA::${target_name}
                              INTERFACE "${CUDA_${lib_name}_LIBRARY}")
      endif()
    endfunction()

    # Add the CUDA libraries
    cuda_add_lib("cufft" "cufft")
    cuda_add_lib("nvToolsExt" "nvToolsExt")
    cuda_add_lib("cuda_driver" "CUDA")

    # Add the NVIDIA compiler
    set(CUDAToolkit_NVCC_EXECUTABLE ${CUDA_NVCC_EXECUTABLE})

  else()
    # Use FindCUDAToolkit module to find CUDA
    find_package(CUDAToolkit REQUIRED)
  endif()
endif()

include_directories(${CMAKE_CURRENT_BINARY_DIR}/src)

# add main include folder
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)

# add subfolders, after specifying the targets to build
add_subdirectory(src)

# write config file, included in all files of the project
configure_file("${PROJECT_SOURCE_DIR}/cmake/config/idg-config.h.in"
               "${PROJECT_BINARY_DIR}/src/idg-config.h")

install(FILES ${PROJECT_BINARY_DIR}/src/idg-config.h DESTINATION include)

# Create idg-targets.cmake
set(TARGETS_TO_EXPORT idg)
set(TARGETS_TO_EXPORT ${TARGETS_TO_EXPORT} idg-external)
set(TARGETS_TO_EXPORT ${TARGETS_TO_EXPORT} idg-common)
set(TARGETS_TO_EXPORT ${TARGETS_TO_EXPORT} idg-fft)
if(BUILD_LIB_CPU)
  set(TARGETS_TO_EXPORT ${TARGETS_TO_EXPORT} idg-cpu)
endif()
if(BUILD_LIB_CUDA)
  set(TARGETS_TO_EXPORT ${TARGETS_TO_EXPORT} idg-cuda)
endif()
if(BUILD_LIB_CPU AND BUILD_LIB_CUDA)
  set(TARGETS_TO_EXPORT ${TARGETS_TO_EXPORT} idg-hybrid-cuda)
endif()
if(BUILD_LIB_OPENCL)
  set(TARGETS_TO_EXPORT ${TARGETS_TO_EXPORT} idg-opencl)
endif()
export(TARGETS ${TARGETS_TO_EXPORT}
       FILE ${PROJECT_BINARY_DIR}/CMakeFiles/idg-targets.cmake)

install(EXPORT idg-targets DESTINATION lib/cmake)

# Create idg-config.cmake
configure_file(${PROJECT_SOURCE_DIR}/cmake/config/idg-config.cmake.in
               ${PROJECT_BINARY_DIR}/CMakeFiles/idg-config.cmake @ONLY)

install(FILES ${PROJECT_BINARY_DIR}/CMakeFiles/idg-config.cmake
        DESTINATION share)

if(BUILD_TESTING)
  add_subdirectory(tests)
endif()
