# Copyright (C) 2023 ASTRON (Netherlands Institute for Radio Astronomy)
# SPDX-License-Identifier: GPL-3.0-or-later

# This file contains the pipelines that run on the Astron repository of IDG,
# which is at https://git.astron.nl/RD/idg

include: .gitlab-ci.common.yml

# See the idg-integration-docker job in .gitlab-ci.common.yml for notes about
# integration test jobs.
test-integration-das:
  stage: test
  needs: []
  allow_failure: true
  tags:
    - das6-gpu
  before_script:
    - source scripts/load_modules_das6.sh
    - virtualenv venv --system-site-packages
    - source venv/bin/activate
    - pip install pytest-lazy-fixture --force
    - pip install cuda-python --force
    - pip install everybeam --force
    # Build with GPU libs
    - cmake -S . -B build -DBUILD_LIB_CUDA=On -DBUILD_TESTING=On -DCMAKE_BUILD_TYPE=Release -DWRITE_OUT_SCALAR_BEAM=ON -DBUILD_WITH_PYTHON=ON -DCMAKE_INSTALL_PREFIX=install
    - make -C build install -j`nproc`
    # Add IDG to environment
    - module use install/share
    - module load idg.env
    # Install WSclean (needs libgsl)
    - cd $CI_PROJECT_DIR
    - git clone --depth 1 --branch v3.3 https://gitlab.com/aroffringa/wsclean.git
    - cd wsclean
    - export OPENBLAS_NUM_THREADS=1
    - cmake -S . -B build -DCFITSIO_ROOT_DIR=${CFITSIO_ROOT} -DCASACORE_ROOT_DIR=${CASACORE_ROOT} -DCMAKE_PREFIX_PATH="${CI_PROJECT_DIR}/install;${EVERYBEAM_ROOT};${FFTW_ROOT}" -DCMAKE_INSTALL_PREFIX=install
    - make -C build install -j`nproc`
    - export PATH=$PATH:$CI_PROJECT_DIR/wsclean/install/bin
  script:
    - cd $CI_PROJECT_DIR/build
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDA_ROOT/lib64
    # Run unit tests (more precisely: the non-integration tests)
    - ctest -j16 --output-on-failure -LE integration
    - echo "Finished unit tests"
    # Run integration tests
    - ctest --output-on-failure -L integration
  after_script:
    # Generate reports folder for storing the junit test reports
    - mkdir reports
    # Collect junit xml reports
    - cd build
    - XML_FILES="$(find . -name test_*.xml)"
    - if [ -n "$XML_FILES" ]; then mv $XML_FILES $CI_PROJECT_DIR/reports/; fi
  artifacts:
    reports:
      junit: reports/test_*.xml

test-tuning-das:
  stage: test
  needs: []
  tags:
    - das6-gpu
  before_script:
    # Prepare environment to run kernel_tuner
    - source idg-bin/tuning/load_modules_das6.sh
    - pip3 install pycuda
    - pip3 install kernel_tuner
  script:
    # There is no need to install IDG, run the tests directly
    - idg-bin/tuning/tTuneCUDAGridder
    - idg-bin/tuning/tTuneCUDADegridder

deploy-package:
  stage: publish
  needs: ["versioning","build-package"]
  image: $BASE_IMAGE
  script:
    - pip3 install aptly-api-client
    - chmod -R 700 external/schaap-packaging
    - cd idg_package
    - export FILES=$(ls -1 $PWD/*.deb)
    - echo UPLOADING files $FILES
    # The following example command must be executed first or else the update will fail because there is no repository
    # create_repo.py -a amd64 -c testing -d bionic --gpg-key ${GPG_KEY} --gpg-passphrase ${GPG_PASS} schaap
    - ../external/schaap-packaging/update_repo.py --cleanup -d bionic --gpg-key ${GPG_KEY} --gpg-passphrase ${GPG_PASS} schaap ${FILES}
  rules:
    # Only run on master because GPG_KEY and GPG_PASS are protected and therefore only available on protected branches.
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$UPLOAD_PACKAGE'
