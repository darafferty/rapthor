# Copyright (C) 2020 ASTRON (Netherlands Institute for Radio Astronomy)
# SPDX-License-Identifier: GPL-3.0-or-later

workflow:
  rules:
    # Don't create a pipeline if it's a commit pipeline on a branch having an open merge request
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - when: always

.astron_repo: &if_astron_repo
  if: '$CI_SERVER_HOST == "git.astron.nl"'
.not_astron_repo: &if_not_astron_repo
  if: '$CI_SERVER_HOST != "git.astron.nl"'

stages:
 - prepare
 - build
 - linting
 - test
 - integration_and_deploy
 - publish
 - pages

build-base:
  stage: prepare
  image: docker:stable
  script:
    - docker build --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base -f ./docker/ubuntu_20_04_base .
  rules:
    - <<: *if_astron_repo

# On the SKA repo - which does not have a docker cache - we need to push the base image to the gitlab registry which requires docker:dind
build-base-ska:
  stage: prepare
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base -f ./docker/ubuntu_20_04_base .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  rules:
    - <<: *if_not_astron_repo

build-integration:
  stage: prepare
  image: docker:stable
  script:
    - docker build --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_integration -f ./docker/ubuntu_20_04_integration .
  rules:
    - <<: *if_astron_repo

# On the SKA repo - which does not have a docker cache - we need to push the image for the integration to the gitlab registry which requires docker:dind
build-integration-ska:
  stage: prepare
  image: docker:stable
  services:
  - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_integration -f ./docker/ubuntu_20_04_integration .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_integration
  rules:
    - <<: *if_not_astron_repo

format:
  stage: linting
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  script:
    - ./scripts/run-format.sh
  allow_failure: true

idg-python:
  stage: build
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  script:
    - mkdir build
    - cd build
    - cmake -DBUILD_WITH_PYTHON=ON ..
    - make install -j4

idg-release:
  stage: build
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  script:
    - mkdir build
    - cd build
    - cmake ..
    - make install -j4

idg-debug:
  stage: build
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  script:
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug
    - make install -j4
  rules:
    - when: on_success

idg-test:
  stage: test
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage" -DBUILD_TESTING=On
    - make install -j4
    - export LD_LIBRARY_PATH=$(pwd)/lib:$LD_LIBRARY_PATH
    - ctest -j8 --output-on-failure -LE integration -T test
    # Use the most recent Test.xml output file in a subdirectory of Testing/
    - export XML=$(ls -t Testing/*/Test.xml | head -n1)
    - mv $XML unittests.xml
    # Capture coverage
    - gcovr -r .. -e '.*/tests/.*' -e '.*/CompilerIdCXX/.*' -e '.*/external/.*' --json -o run-unit.json
    - gcovr --add-tracefile run-unit.json --xml > coverage.xml
    - gcovr --add-tracefile run-unit.json
  rules:
    - when: on_success
  artifacts:
    paths:
      - build/run-unit.json
      - build/unittests.xml
    reports:
      junit: build/unittests.xml
      cobertura: build/coverage.xml

build-package:
  stage: build
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  script:
    - mkdir idg_package
    - mkdir build
    - cd build
    - git fetch --unshallow # We need to unshallow for the tags (setting GIT_DEPTH is not good enough)
    - cmake -DBUILD_PACKAGES=On ..
    - make -j4
    - make package
    - mv $(ls -1 *.deb) ../idg_package/
  artifacts:
    paths:
    - idg_package/
  rules:
    # The package is built only during a merge_request_event, a merge to master,
    # or when the pipeline is triggered by a tag event.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_TAG'
    - if: '$UPLOAD_PACKAGE'

# Notes for both integration test jobs:
# - allow_failure is true, since the job will fail when IDG has breaking API
#   changes and WSClean/DP3 have not incorporated those changes yet.
# - Always use the most recent WSClean/DP3 master, instead of a fixed version:
#   - EveryBeam may change, which will require the latest WSclean/DP3.
#   - When the IDG API itself changes, use the latest WSClean/DP3 ASAP.
# - Since the IDG repo should not have (circular) dependencies on WSClean and
#   DP3, we want to run these jobs as part of schaap-stack in the future.
idg-integration-docker:
  stage: integration_and_deploy
  allow_failure: true
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_integration
  before_script:
    # Install IDG
    - mkdir /opt/idg && mkdir -p build
    - cd build
    - cmake -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release -DWRITE_OUT_SCALAR_BEAM=ON -DBUILD_WITH_PYTHON=ON -DCMAKE_INSTALL_PREFIX=/opt/idg ..
    - make install -j4
    # Exported, since integrationstep tIDGCalDPStep needs this variable
    - export IDG_LIB=/opt/idg/lib
    - export LD_LIBRARY_PATH=$IDG_LIB:$LD_LIBRARY_PATH
    # Compile against wsclean
    - mkdir /wsclean && cd /wsclean && git clone https://gitlab.com/aroffringa/wsclean.git src
    - mkdir build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/opt/idg -DCMAKE_INSTALL_PREFIX=/usr ../src
    - make install -j4
    - cd $CI_PROJECT_DIR && rm -rf /wsclean
    # Install dp3
    - mkdir /dp3 && cd /dp3 && git clone https://github.com/lofar-astron/DP3.git src
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr ../src
    - make install -j4
    - cd $CI_PROJECT_DIR && rm -rf /dp3
    - export DP3_LIB=/usr/lib
  script:
    # Return to idg build directory to run tests
    - cd build
    - ctest --output-on-failure -L integration
    # Test idg-cal scripts
    - cd $CI_PROJECT_DIR/idg-cal/unit_tests
    - pytest -v .
  rules:
    - when: on_success

idg-integration-das:
  stage: integration_and_deploy
  allow_failure: true
  tags:
    - ci_gpu
  needs: []
  before_script:
    # Clean and generate reports folder in CI_PROJECT_DIR for storing the junit test reports
    - rm -rf reports/* && mkdir -p reports
    - source scripts/load_modules.sh
    - python3 -m pip install --user --upgrade pip
    # Make sure h5py is build against the hdf5 library loaded by load_modules.sh
    # This is important when h5py is imported in embedded python code
    # and the main executable is also linked against the hdf5 library.
    # This happens for example when DPPP is running a PythonDPStep that is
    # importing h5py
    - HDF5_DIR=${HDF5_ROOT} python3 -m pip install h5py --user --no-binary=h5py --force-reinstall --no-deps
    - python3 -m pip install --user astropy scipy pytest pytest-lazy-fixture h5py matplotlib
    # pytest executable is installed in local/bin. Add to PATH
    - export PATH=$PATH:/home/gitlab-runner/.local/bin
    # Install idg
    - mkdir -p ~/opt/idg && cd ~/opt/idg  && rm -rf *
    # Copy source code to src
    - mkdir src && cp -r $CI_PROJECT_DIR/. src/.
    - mkdir build && cd build
    # Build with GPU libs
    - cmake -DBUILD_LIB_CUDA=On -DBUILD_TESTING=On -DCMAKE_BUILD_TYPE=Release -DWRITE_OUT_SCALAR_BEAM=ON -DBUILD_WITH_PYTHON=ON -DCMAKE_INSTALL_PREFIX=.. ../src
    - make install -j4
    # Exported, since integrationstep tIDGCalDPStep needs this variable
    - export IDG_LIB=~/opt/idg/lib
    - export LD_LIBRARY_PATH=$IDG_LIB:$LD_LIBRARY_PATH
    # Install WSclean (needs libgsl)
    - mkdir -p ~/opt/wsclean && cd ~/opt/wsclean && rm -rf *
    - git clone https://gitlab.com/aroffringa/wsclean.git src
    - mkdir build && cd build
    - export OPENBLAS_NUM_THREADS=1
    - cmake -DCFITSIO_ROOT_DIR=${CFITSIO_ROOT_DIR} -DCASACORE_ROOT_DIR=${CASACORE_ROOT_DIR} -DCMAKE_PREFIX_PATH="~/opt/idg;${EVERYBEAM_ROOT_DIR};${FFTW3_ROOT_DIR}" -DCMAKE_INSTALL_PREFIX=.. ../src
    - make install -j4
    - export PATH=$PATH:~/opt/wsclean/bin
  script:
    - cd ~/opt/idg/build
    # Run unit tests (more precisely: the non-integration tests)
    - ctest -j8 --output-on-failure -LE integration
    - echo "Finished unit tests"
    # Run integration tests
    - CFLAGS="-I${WCSLIB_INCLUDE} -I${CFITSIO_INCLUDE}" python3 -m pip install --user --no-binary python-casacore python-casacore
    - ctest --output-on-failure -L integration
    - mv test_*.xml $CI_PROJECT_DIR/reports/
    # Test idg-cal scripts
    - cd $CI_PROJECT_DIR/idg-cal/unit_tests
    - pytest -v --junitxml=$CI_PROJECT_DIR/reports/test_idgcal.xml .
  artifacts:
    reports:
      junit: reports/test_*.xml
  rules:
    - <<: *if_astron_repo

deploy-package:
  stage: integration_and_deploy
  needs: ["build-package"]
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  script:
    - pip3 install aptly-api-client
    - chmod -R 700 external/schaap-packaging
    - cd idg_package
    - export FILES=$(ls -1 $PWD/*.deb)
    - echo UPLOADING files $FILES
    # The following example command must be executed first or else the update will fail because there is no repository
    # create_repo.py -a amd64 -c testing -d bionic --gpg-key ${GPG_KEY} --gpg-passphrase ${GPG_PASS} schaap
    - ../external/schaap-packaging/update_repo.py --cleanup -d bionic --gpg-key ${GPG_KEY} --gpg-passphrase ${GPG_PASS} schaap ${FILES}
  rules:
    # Only run on master because GPG_KEY and GPG_PASS are protected and therefore only available on protected branches.
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$UPLOAD_PACKAGE'

pages:
  stage: pages
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  needs: ["idg-test"]
  before_script:
    - apt-get update
    - apt-get -y install curl
  script:
    - mkdir -p .public/build/reports
    - cd .public
    - gcovr -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -r ../ -a ../build/run-unit.json --xml -o build/reports/code-coverage.xml
    - gcovr -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -r ../ -a ../build/run-unit.json --html --html-details -o index.html
    - cp ../build/unittests.xml build/reports/unit-tests.xml
    # Create and upload GitLab badges
    - chmod -R 700 ../CI
    - python3 ../CI/.produce-ci-metrics.py build/reports > build/reports/ci-metrics.json
    - sh ../CI/ci-badges-func.sh
    - cd ..
    - mv .public public
  artifacts:
    paths:
      - public
    reports:
      cobertura: public/build/reports/code-coverage.xml
  rules:
    - <<: *if_not_astron_repo

check-stack:
  variables:
    # Pass commit hash to downstream pipeline
    IDG_TRIGGER_HASH: $CI_COMMIT_SHA
  stage: integration_and_deploy
  needs: []
  trigger:
    project: RD/schaap-stack
    branch: master
    # This will mirror the status of the downstream pipeline
    strategy: depend
  rules:
    # Only add job for a merge request event
    - <<: *if_not_astron_repo
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - when: never

build-doc:
  stage: build
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  needs: ["build-base"]
  script:
    - apt update && apt install -y doxygen
    - python3 -m pip install numpy sphinx breathe sphinx-rtd-theme myst-parser
    - mkdir -p build && cd build
    - cmake -DBUILD_WITH_PYTHON=ON ..
    - make install -j4
    - make doc
  artifacts: # Only for master the docs are published; for branches it may be useful to browse the artifacts
    paths:
    - build/doc/html
  rules:
    - <<: *if_astron_repo

publish-doc:
  stage: publish
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  needs: ["build-doc"]
  before_script:
    - apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "dop810,195.169.155.206 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFCjBBJSbZSFmDGJK8Xlxa2gt/4TUqacQAo1kxWVwMeHqqXP0+HasL9tDYe25Ci7/Ug3roQkwoJBzyuCkN+dtr8=" >> ~/.ssh/known_hosts
  script:
    - scp -r build/doc/html/* citt@dop810:IDG
  rules:
    - <<: *if_not_astron_repo
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
