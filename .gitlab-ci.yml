# Copyright (C) 2020 ASTRON (Netherlands Institute for Radio Astronomy)
# SPDX-License-Identifier: GPL-3.0-or-later

stages:
 - prepare
 - build
 - integration_and_deploy

build-base:
  stage: prepare
  needs: []
  script:
    - docker build --tag idg_base:${CI_COMMIT_SHORT_SHA} -f ./docker/ubuntu_20_04_base .

build-integration:
  stage: prepare
  needs: []
  script:
    - docker build --tag idg_integration:${CI_COMMIT_SHORT_SHA} -f ./docker/ubuntu_20_04_integration .

clang-format:
  stage: build
  needs: ["build-base"]
  image: idg_base:${CI_COMMIT_SHORT_SHA}
  before_script:
    - pip3 install clang-format==9.0.0
  script:
    - ./scripts/run-clang-format.sh

idg-python:
  stage: build
  needs: ["build-base"]
  image: idg_base:${CI_COMMIT_SHORT_SHA}
  script:
    - mkdir build
    - cd build
    - cmake -DBUILD_WITH_PYTHON=ON ..
    - make install -j4

idg-release:
  stage: build
  needs: ["build-base"]
  image: idg_base:${CI_COMMIT_SHORT_SHA}
  script:
    - mkdir build
    - cd build
    - cmake ..
    - make install -j4

idg-debug:
  stage: build
  needs: ["build-base"]
  image: idg_base:${CI_COMMIT_SHORT_SHA}
  script:
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug
    - make install -j4

idg-test:
  stage: build
  needs: ["build-base"]
  image: idg_base:${CI_COMMIT_SHORT_SHA}
  script:
    - pip3 install gcovr
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage" -DBUILD_TESTING=On
    - make install -j4
    - export LD_LIBRARY_PATH=$(pwd)/lib:$LD_LIBRARY_PATH
    - ctest -j8 --verbose -LE integration
    # Capture coverage
    - gcovr -r .. -e '.*/tests/.*' -e '.*/CompilerIdCXX/.*' -e '.*/external/.*'
    - gcovr -r .. -e '.*/tests/.*' -e '.*/CompilerIdCXX/.*' -e '.*/external/.*' --xml > coverage.xml
  artifacts:
    reports:
      cobertura: build/coverage.xml

idg-integration-docker:
  stage: integration_and_deploy
  image: idg_integration:${CI_COMMIT_SHORT_SHA}
  needs: ["build-integration"]
  before_script:
    - pip3 install pytest pytest-lazy-fixture
    - export HOME_DIR=$PWD
    # Install IDG
    - mkdir /opt/idg && mkdir build
    - cd build
    - cmake -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release -DWRITE_OUT_SCALAR_BEAM=ON -DBUILD_WITH_PYTHON=ON -DCMAKE_INSTALL_PREFIX=/opt/idg ..
    - make install -j4
    - export LD_LIBRARY_PATH="/opt/idg/lib:$LD_LIBRARY_PATH"
    # Compile against development branch of wsclean
    - mkdir /wsclean && cd /wsclean && git clone https://gitlab.com/aroffringa/wsclean.git src
    - cd src/ && git checkout development && cd ..
    - mkdir build && cd build
    - cmake -DCMAKE_PREFIX_PATH=/opt/idg -DCMAKE_INSTALL_PREFIX=/usr ../src
    - make install -j4
    - cd $HOME_DIR && rm -rf /wsclean
    # Install dp3
    - mkdir /dp3 && cd /dp3 && git clone https://github.com/lofar-astron/DP3.git src
    - cd src/ && git checkout development && cd ..
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr ../src
    - make install -j4
    - cd $HOME_DIR && rm -rf /dp3
  script:
    # Return to idg build directory to run tests
    - cd build
    # Run in verbose mode -VV as long as it's not properly working
    - ctest -VV -L integration

idg-integration-das:
  stage: integration_and_deploy
  tags:
    - ci_gpu
  needs: []
  before_script:
    # Makes it easy to find the idg source location later on
    - export CURRENT_SOURCE=$PWD
    - source scripts/load_modules.sh
    - pip3 install --user --upgrade pip
    - pip3 install --user astropy scipy pytest pytest-lazy-fixture
    # pytest executable is installed in local/bin. Add to PATH
    - export PATH=$PATH:/home/gitlab-runner/.local/bin
    # Install casacore --> replace with module load casacore/3.[something]
    - mkdir -p ~/opt/casacore && cd ~/opt/casacore && rm -rf *
    - git clone --branch v3.3.0 https://github.com/casacore/casacore src
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=.. -DCMAKE_PREFIX_PATH="${CFITSIO_ROOT_DIR};${WCSLIB_ROOT_DIR};${FFTW3_ROOT_DIR}" -DBUILD_PYTHON=Off -DBUILD_PYTHON3=On -DUSE_FFTW3=On -DDATA_DIR=/cm/shared/package/casacore/v2.4.1-gcc-6.3.0/data/ ../src
    - make install -j20
    # Install everybeam --> replace with module load everybeam/[stable/latest]
    - mkdir -p ~/opt/everybeam && cd ~/opt/everybeam && rm -rf *
    - git clone https://git.astron.nl/RD/EveryBeam.git src
    - cd src/ && git checkout v0.1.0 && cd ..
    - mkdir build && cd build
    - cmake -DCFITSIO_ROOT_DIR=${CFITSIO_ROOT_DIR} -DCASACORE_ROOT_DIR=~/opt/casacore -DCMAKE_PREFIX_PATH=${FFTW3_ROOT_DIR} -DCMAKE_INSTALL_PREFIX=.. ../src
    - make install -j4
    # Install aoflagger3 --> replace with module load aoflagger3/[something]
    - mkdir -p ~/opt/aoflagger && cd ~/opt/aoflagger  && rm -rf *
    - git clone https://gitlab.com/aroffringa/aoflagger.git src
    # Remove line from CMakeLists.txt
    - cd src
    - grep -v "pkg_check_modules(GTKMM gtkmm-3.0>=3.0.0)" CMakeLists.txt > temp && mv temp CMakeLists.txt
    - cd ..
    - mkdir build && cd build
    - cmake -DCMAKE_LIBRARY_PATH=/usr/lib64:$CMAKE_LIBRARY_PATH -DFFTW3_LIB=${FFTW3_LIB}/libfftw3.so -DCFITSIO_ROOT_DIR=${CFITSIO_ROOT_DIR} -DCASACORE_ROOT_DIR=~/opt/casacore -DCMAKE_INSTALL_PREFIX=.. ../src
    - make install -j4
    # Install idg
    - mkdir -p ~/opt/idg && cd ~/opt/idg  && rm -rf *
    # Copy source code to src
    - mkdir src && cp -r $CURRENT_SOURCE/. src/.
    - mkdir build && cd build
    # Build with GPU libs
    - cmake -DBUILD_LIB_CUDA=On -DBUILD_TESTING=On -DCMAKE_BUILD_TYPE=Release -DWRITE_OUT_SCALAR_BEAM=ON -DBUILD_WITH_PYTHON=ON -DCMAKE_INSTALL_PREFIX=.. ../src
    - make install -j4
    - export LD_LIBRARY_PATH="~/opt/idg/lib:$LD_LIBRARY_PATH"
    # Install wsclean (dev branch, needs libgsl)
    - mkdir -p ~/opt/wsclean && cd ~/opt/wsclean && rm -rf *
    - git clone https://gitlab.com/aroffringa/wsclean.git src
    - cd src/ && git checkout development && cd ..
    - mkdir build && cd build
    - cmake -DCFITSIO_ROOT_DIR=${CFITSIO_ROOT_DIR} -DCASACORE_ROOT_DIR=~/opt/casacore -DCMAKE_PREFIX_PATH="~/opt/idg;~/opt/everybeam;${FFTW3_ROOT_DIR}" -DCMAKE_INSTALL_PREFIX=.. ../src
    - make install -j4
    - export PATH=$PATH:~/opt/wsclean/bin
    # Install dp3
    - mkdir -p ~/opt/dp3 && cd ~/opt/dp3 && rm -rf *
    - git clone https://github.com/lofar-astron/DP3.git src
    - cd src/ && git checkout development && cd ..
    - mkdir build && cd build
    - cmake -DCASACORE_ROOT_DIR=~/opt/casacore -DCMAKE_PREFIX_PATH="~/opt/aoflagger;~/opt/everybeam;~/opt/idg" -DCMAKE_INSTALL_PREFIX=.. ../src
    - make install -j4
    - export PATH=$PATH:~/opt/dp3/bin
    # Extend the LD_LIBRARY_PATH
    - export LD_LIBRARY_PATH=~/opt/everybeam/lib/:~/opt/casacore/lib:~/opt/aoflagger/lib:~/opt/idg/lib:$LD_LIBRARY_PATH
    - export LD_LIBRARY_PATH=${BLAS_LIB}:$LD_LIBRARY_PATH
  script:
    - cd ~/opt/idg/build
    # Run unit tests (more precisely: the non-integration tests)
    - ctest -j8 --verbose -LE integration
    - echo "Finished unit tests"
    # Run integration tests
    - "python3 -m pip install --user --only-binary=:all: python-casacore"
    - ctest --verbose -L integration
