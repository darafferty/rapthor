# Copyright (C) 2021 ASTRON (Netherlands Institute for Radio Astronomy)
# SPDX-License-Identifier: GPL-3.0-or-later

# This file contains the pipelines that run on the SKAO repository of IDG, which
# is at https://gitlab.com/ska-telescope/sdp/ska-sdp-func-idg

include:
  - local: .gitlab-ci.common.yml
# Create Gitlab CI badges from CI metrics
# https://developer.skao.int/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
  - project: ska-telescope/templates-repository
    file: gitlab-ci/includes/post_step.yml

# Caching 'public' allows keeping the 'pages' output of multiple branches / MRs.
cache:
  paths:
    - public

# The SKA repo does not have a docker cache.
# We need to push the base image to the gitlab registry which requires docker:dind
prepare-base:
  stage: prepare
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base -f ./docker/ubuntu_20_04_base .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base

# The SKA repo does not have a docker cache
# We need to push the integration image to the gitlab registry which requires docker:dind
prepare-integration:
  stage: prepare
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_integration -f ./docker/ubuntu_20_04_integration .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_integration

test-unit-gpu:
  stage: test
  needs: []
  # This job may fail, since the k8srunner-gpu node is still experimental.
  allow_failure: true
  timeout: 10 minutes
  tags: [k8srunner-gpu]
  image: nvidia/cuda:11.3.1-devel-ubuntu20.04
  before_script:
    - nvidia-smi
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update
    - apt-get install -y --no-install-recommends libboost-all-dev g++ cmake libfftw3-dev liblapacke-dev python3 python3-pip git ninja-build
    - pip3 install gcovr
    - export LD_LIBRARY_PATH=/usr/local/cuda-11.3/compat:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage" -DBUILD_TESTING=On -DBUILD_LIB_CUDA=On -G Ninja
    - ninja install
    - export LD_LIBRARY_PATH=$(pwd)/lib:$LD_LIBRARY_PATH
    - ctest -j8 --output-on-failure -R cuda
    # Capture coverage
    - gcovr -r .. -e '.*/tests/.*' -e '.*/CompilerIdCXX/.*' -e '.*/external/.*' --json run-unit-gpu.json --xml coverage-gpu.xml
    - gcovr --add-tracefile run-unit-gpu.json
  artifacts:
    paths:
      - build/run-unit-gpu.json
    reports:
      cobertura: build/coverage-gpu.xml

pages:
  stage: pages
  needs: ["test-unit"]
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}_base
  script:
    - echo Deploying GitLab pages to $CI_PAGES_URL/$CI_COMMIT_REF_SLUG
    - mkdir -p public/$CI_COMMIT_REF_SLUG
    - cd public/$CI_COMMIT_REF_SLUG
    - gcovr -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -r ../../ -a ../../build/run-unit.json --html-details index.html
  artifacts:
    name: $CI_COMMIT_REF_SLUG
    paths:
      - public
    expire_in: 1 week
